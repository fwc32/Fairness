import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
import random
from networkx.generators.community import LFR_benchmark_graph
from sklearn.preprocessing import OneHotEncoder


class BalancedFairKMeans:
    def __init__(self, n_clusters=3, max_iter=100, tol=1e-4, p1=1.0, p2=1.0):
        self.n_clusters = n_clusters  # 簇的数量
        self.max_iter = max_iter  # 最大迭代次数
        self.tol = tol  # 收敛容忍度
        self.p1 = p1  # 权重参数1
        self.p2 = p2  # 权重参数2

    def fit(self, X, F):
        n_samples, n_features = X.shape  # 获取样本数量和特征数量
        last_labels = np.zeros(n_samples)
        labels = np.random.randint(0, self.n_clusters, size=n_samples)  # 随机初始化标签
        Y = self.indicator_matrix(labels)  # 指示矩阵

        centers = np.zeros((self.n_clusters, n_features))  # 初始化质心

        # 计算初始质心
        for c in range(self.n_clusters):
            if np.sum(labels == c) > 0:
                centers[c] = np.mean(X[labels == c], axis=0)

        iter_count = 0
        err = 1

        # 计算整个数据集中每个群体的比例
        group_proportions = np.sum(F, axis=0) / n_samples

        while (err > self.tol and iter_count < self.max_iter and np.any(labels != last_labels)):
            last_labels = labels.copy()

            for i in range(n_samples):
                idx_label = labels[i]
                idx_group = np.where(F[i, :] > 0)[0][0]  # 找到该点的组

                Y[i, :] = 0  # 清除当前点的指示

                min_cost = float('inf')
                idx = 0
                for c in range(self.n_clusters):
                    # 计算当前聚类中不同群体的数量
                    cluster_group_counts = np.sum(F[labels == c], axis=0)
                    total_in_cluster = np.sum(cluster_group_counts)

                    # 计算公平性损失
                    if total_in_cluster > 0:
                        fairness_loss = np.sum(np.abs(cluster_group_counts / total_in_cluster - group_proportions))
                    else:
                        fairness_loss = 0

                    # 成本函数：p1表示公平性重视程度，p2表示平衡性的重视函数
                    cost = np.sum((X[i, :] - centers[c, :]) ** 2) + self.p1 * fairness_loss + self.p2 * (
                            total_in_cluster / n_samples)

                    if min_cost > cost:
                        min_cost = cost
                        idx = c

                Y[i, idx] = 1  # 更新指示矩阵

            labels = np.argmax(Y, axis=1)  # 更新标签
            centers = np.zeros((self.n_clusters, n_features))  # 重置质心
            for c in range(self.n_clusters):
                if np.sum(labels == c) > 0:
                    centers[c] = np.mean(X[labels == c], axis=0)
                else:
                    centers[c] = np.zeros(n_features)  # 如果没有样本，则将质心设置为零

            iter_count += 1

        if iter_count >= self.max_iter and err > self.tol:
            print(f"Warning: failed to converge in {self.max_iter} iterations")

        return labels, centers

    def indicator_matrix(self, labels):
        # 创建指示矩阵
        n_samples = len(labels)
        Y = np.zeros((n_samples, self.n_clusters))
        for i in range(n_samples):
            Y[i, labels[i]] = 1  # 对应标签位置设置为1，表示该样本属于相应的簇
        return Y


# 主程序部分
if __name__ == "__main__":
    # LFR网络参数
    n = 500
    tau1 = 3
    tau2 = 1.5
    mu = 0.1
    max_iters = 300

    # 生成LFR基准网络
    G = LFR_benchmark_graph(
        n=n,
        tau1=tau1,
        tau2=tau2,
        mu=mu,
        average_degree=20,
        min_community=40,
        seed=42
    )

    # 随机分配红/蓝属性
    for node in G.nodes():
        G.nodes[node]['color'] = random.choice(['red', 'blue'])

    # 特征矩阵（节点坐标）
    pos = nx.spring_layout(G, seed=42)
    X = np.array([pos[node] for node in G.nodes()])

    # 敏感属性矩阵（One-Hot编码）
    colors = [G.nodes[node]['color'] for node in G.nodes()]
    enc = OneHotEncoder(sparse_output=False)
    F = enc.fit_transform(np.array(colors).reshape(-1, 1))

    # 执行聚类
    n_clusters = 6
    bfkm = BalancedFairKMeans(n_clusters=n_clusters, p1=0.5, p2=0.5)
    labels, centers = bfkm.fit(X, F)

    # 可视化设置
    plt.figure(figsize=(18, 6))

    # 1. 聚类结果图（每个簇的节点颜色）
    plt.subplot(131)  # 第一个子图
    for cluster_id in range(n_clusters):
        cluster_nodes = [node for node, label in zip(G.nodes(), labels) if label == cluster_id]
        if cluster_nodes:
            # 为每个簇分配一个颜色
            cluster_color = plt.colormaps['tab10'](cluster_id)
            nx.draw_networkx_nodes(
                G, pos, nodelist=cluster_nodes,
                node_size=50, node_color=[cluster_color] * len(cluster_nodes),
                edgecolors='k', linewidths=0.5
            )
    nx.draw_networkx_edges(G, pos, alpha=0.1)
    plt.title('Clustering Result\nColor: Cluster')
    plt.axis('off')

    # 2. 原始图的节点颜色图
    plt.subplot(132)  # 第二个子图
    node_colors = [G.nodes[node]['color'] for node in G.nodes()]
    nx.draw_networkx_nodes(
        G, pos, node_size=50, node_color=node_colors,
        edgecolors='k', linewidths=0.5
    )
    nx.draw_networkx_edges(G, pos, alpha=0.1)
    plt.title('Original Node Colors (Red/Blue)')
    plt.axis('off')

    # 聚类中心图结果
    plt.subplot(133)  # 第三个子图
    for cluster_id in range(n_clusters):
        cluster_nodes = [node for node, label in zip(G.nodes(), labels) if label == cluster_id]
        if cluster_nodes:
            nx.draw_networkx_nodes(
                G, pos, nodelist=cluster_nodes, node_size=500, node_color='skyblue', node_shape='o'
            )

    # 绘制聚类中心
    for center in centers:
        plt.scatter(
            center[0], center[1],
            s=300, marker='*',
            c='yellow', edgecolors='black',
            zorder=1000
        )

    plt.title('Clustering Result\nShape: Cluster, Color: Sensitive Attribute')
    plt.axis('off')
    plt.tight_layout()
    plt.show()
