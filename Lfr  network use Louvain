import networkx as nx
import matplotlib.pyplot as plt
import random
import community as community_louvain
from networkx.generators.community import LFR_benchmark_graph

# 设置参数
n = 500  # 节点数
tau1 = 2.0  # 群组内度分布指数
tau2 = 1.5  # 群组之间度分布指数
mu = 0.1  # 社区之间边的比例

average_degree = 30  # 降低期望的平均度数
min_degree = None  # 不指定最小度数，通过 average_degree 自动计算
max_degree = 100  # 最大度数
min_community = 30  # 最小社区大小
max_community = 100  # 最大社区大小

max_iters = 1000  # 最大迭代次数

# 生成LFR基准图
try:
    G = LFR_benchmark_graph(n, tau1, tau2, mu,
                            average_degree=average_degree,
                            max_degree=max_degree,
                            min_community=min_community,
                            max_community=max_community,
                            max_iters=max_iters,
                            seed=42)

    print(f"Number of nodes: {len(G.nodes)}")
    print(f"Number of edges: {len(G.edges)}")

    # 为每个节点随机分配红色或蓝色社区，并保存颜色信息
    node_colors = {}
    for node in G.nodes:
        color = random.choice(['red', 'blue'])  # 随机分配颜色
        node_colors[node] = color
        G.nodes[node]['color'] = color  # 将颜色保存为节点属性

    # 使用Louvain算法进行社区划分
    partition = community_louvain.best_partition(G)

    # 输出划分结果
    print("Community partition (Louvain):")
    communities = {}
    for node, community in partition.items():
        if community not in communities:
            communities[community] = []
        communities[community].append(node)

    # 可视化结果
    pos = nx.spring_layout(G)
    plt.figure(figsize=(10, 10))

    # 根据Louvain社区划分可视化
    community_map = {}
    for node, community in partition.items():
        community_map[node] = community

    # 使用不同的颜色绘制每个社区
    colors = [community_map[node] for node in G.nodes()]
    nx.draw(G, pos, node_color=colors, with_labels=True, node_size=500, cmap=plt.cm.jet)
    plt.show()

except Exception as e:
    print(f"Error generating the LFR graph: {e}")
